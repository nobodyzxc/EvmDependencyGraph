Gym.sol:Gym
# MSTORE
0x70c  MSTORE: mem[64] = ADD[0x709](MLOAD[0x706](64),ADD[0x703](32,MUL[0x700](DIV[0x6ff](ADD[0x6fa](31,DIV[0x6f6](AND[0x6f2](SUB[0x6f1](MUL[0x6f0](256,ISZERO[0x6ec](AND[0x6eb](1,SLOAD[0x6e5](4)))),1),SLOAD[0x6e5](4)),2)),32),32)))
0x713  MSTORE: mem[MLOAD[0x706](64)] = DIV[0x6f6](AND[0x6f2](SUB[0x6f1](MUL[0x6f0](256,ISZERO[0x6ec](AND[0x6eb](1,SLOAD[0x6e5](4)))),1),SLOAD[0x6e5](4)),2)
0x742  MSTORE: mem[ADD[0x716](32,MLOAD[0x706](64))] = MUL[0x740](DIV[0x73f](SLOAD[0x73e](4),256),256)
0x753  MSTORE: mem[0] = 4
0x75e  MSTORE: mem[ADD[0x716](32,MLOAD[0x706](64))] = SLOAD[0x75c](ADD[0x762](1,SHA3[0x758](0,32)))
0x75e  MSTORE: mem[ADD[0x716](32,MLOAD[0x706](64))] = SLOAD[0x75c](ADD[0x762](1,#=0x762))
0x75e  MSTORE: mem[ADD[0x716](32,MLOAD[0x706](64))] = SLOAD[0x75c](SHA3[0x758](0,32))
0x75e  MSTORE: mem[ADD[0x766](32,ADD[0x716](32,MLOAD[0x706](64)))] = SLOAD[0x75c](ADD[0x762](1,SHA3[0x758](0,32)))
0x75e  MSTORE: mem[ADD[0x766](32,ADD[0x716](32,MLOAD[0x706](64)))] = SLOAD[0x75c](ADD[0x762](1,#=0x762))
0x75e  MSTORE: mem[ADD[0x766](32,ADD[0x716](32,MLOAD[0x706](64)))] = SLOAD[0x75c](SHA3[0x758](0,32))
0x75e  MSTORE: mem[ADD[0x766](32,#=0x766)] = SLOAD[0x75c](ADD[0x762](1,SHA3[0x758](0,32)))
0x75e  MSTORE: mem[ADD[0x766](32,#=0x766)] = SLOAD[0x75c](ADD[0x762](1,#=0x762))
0x75e  MSTORE: mem[ADD[0x766](32,#=0x766)] = SLOAD[0x75c](SHA3[0x758](0,32))
0x102  MSTORE: mem[MLOAD[0xf8](64)] = SUB[0x100](ADD[0xfd](32,MLOAD[0xf8](64)),MLOAD[0xf8](64))
0x108  MSTORE: mem[ADD[0xfd](32,MLOAD[0xf8](64))] = MLOAD[0x106](MLOAD[0x706](64))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),0)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),0)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32)))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),0)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),ADD[0x12e](#=0x12e,32))] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),ADD[0x12e](#=0x12e,32))] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32)))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),ADD[0x12e](#=0x12e,32))] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),32)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),32)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32)))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),32)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),0)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),0)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32)))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),0)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),ADD[0x12e](#=0x12e,32))] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),ADD[0x12e](#=0x12e,32))] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32)))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),ADD[0x12e](#=0x12e,32))] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),32)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),32)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32)))
0x12a  MSTORE: mem[ADD[0x129](ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64))),32)] = MLOAD[0x126](ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32))
0x15c  MSTORE: mem[SUB[0x14b](ADD[0x13e](MLOAD[0x10f](MLOAD[0x706](64)),ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64)))),AND[0x142](31,MLOAD[0x10f](MLOAD[0x706](64))))] = AND[0x15a](NOT[0x159](SUB[0x158](EXP[0x157](256,SUB[0x153](32,AND[0x142](31,MLOAD[0x10f](MLOAD[0x706](64))))),1)),MLOAD[0x14d](SUB[0x14b](ADD[0x13e](MLOAD[0x10f](MLOAD[0x706](64)),ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64)))),AND[0x142](31,MLOAD[0x10f](MLOAD[0x706](64))))))
0x7b5  MSTORE: mem[0] = AND[0x7b3](1461501637330902918203684832716283019655932542975,AND[0x79d](1461501637330902918203684832716283019655932542975,CALLER[0x787]()))
0x7bb  MSTORE: mem[32] = 2
0x7f2  MSTORE: mem[0] = AND[0x7f0](1461501637330902918203684832716283019655932542975,AND[0x7da](1461501637330902918203684832716283019655932542975,AND[0x1a1](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x18b](4))))
0x7f8  MSTORE: mem[32] = SHA3[0x7c1](0,64)
0x859  MSTORE: mem[MLOAD[0x855](64)] = CALLDATALOAD[0x1ab](36)
0x1c6  MSTORE: mem[MLOAD[0x1be](64)] = 1
0x1f1  MSTORE: mem[MLOAD[0x1ed](64)] = SLOAD[0x874](0)
0x8e7  MSTORE: mem[0] = AND[0x8e5](1461501637330902918203684832716283019655932542975,AND[0x8cf](1461501637330902918203684832716283019655932542975,AND[0x231](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x21b](4))))
0x8ed  MSTORE: mem[32] = 1
0x935  MSTORE: mem[0] = AND[0x933](1461501637330902918203684832716283019655932542975,AND[0x91d](1461501637330902918203684832716283019655932542975,AND[0x231](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x21b](4))))
0x93b  MSTORE: mem[32] = 2
0x972  MSTORE: mem[0] = AND[0x970](1461501637330902918203684832716283019655932542975,AND[0x95a](1461501637330902918203684832716283019655932542975,CALLER[0x944]()))
0x978  MSTORE: mem[32] = SHA3[0x941](0,64)
0x9c4  MSTORE: mem[0] = AND[0x9c2](1461501637330902918203684832716283019655932542975,AND[0x9ac](1461501637330902918203684832716283019655932542975,AND[0x231](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x21b](4))))
0x9ca  MSTORE: mem[32] = 1
0xa12  MSTORE: mem[0] = AND[0xa10](1461501637330902918203684832716283019655932542975,AND[0x9fa](1461501637330902918203684832716283019655932542975,AND[0x231](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x21b](4))))
0xa18  MSTORE: mem[32] = 1
0xa59  MSTORE: mem[0] = AND[0xa57](1461501637330902918203684832716283019655932542975,AND[0xa41](1461501637330902918203684832716283019655932542975,AND[0x251](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x23b](36))))
0xa5f  MSTORE: mem[32] = 1
0xaa7  MSTORE: mem[0] = AND[0xaa5](1461501637330902918203684832716283019655932542975,AND[0xa8f](1461501637330902918203684832716283019655932542975,AND[0x251](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x23b](36))))
0xaad  MSTORE: mem[32] = 1
0xaee  MSTORE: mem[0] = AND[0xaec](1461501637330902918203684832716283019655932542975,AND[0xad6](1461501637330902918203684832716283019655932542975,AND[0x231](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x21b](4))))
0xaf4  MSTORE: mem[32] = 2
0xb2b  MSTORE: mem[0] = AND[0xb29](1461501637330902918203684832716283019655932542975,AND[0xb13](1461501637330902918203684832716283019655932542975,CALLER[0xafd]()))
0xb31  MSTORE: mem[32] = SHA3[0xafa](0,64)
0xb79  MSTORE: mem[0] = AND[0xb77](1461501637330902918203684832716283019655932542975,AND[0xb61](1461501637330902918203684832716283019655932542975,AND[0x231](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x21b](4))))
0xb7f  MSTORE: mem[32] = 2
0xbb6  MSTORE: mem[0] = AND[0xbb4](1461501637330902918203684832716283019655932542975,AND[0xb9e](1461501637330902918203684832716283019655932542975,CALLER[0xb88]()))
0xbbc  MSTORE: mem[32] = SHA3[0xb85](0,64)
0xc1d  MSTORE: mem[MLOAD[0xc19](64)] = CALLDATALOAD[0x25b](68)
0x276  MSTORE: mem[MLOAD[0x26e](64)] = 1
0xd08  MSTORE: mem[0] = AND[0xd06](1461501637330902918203684832716283019655932542975,AND[0xcf0](1461501637330902918203684832716283019655932542975,AND[0xcda](1461501637330902918203684832716283019655932542975,DIV[0xcc4](SLOAD[0xcbd](3),1))))
0xd0e  MSTORE: mem[32] = 1
0xd78  MSTORE: mem[0] = AND[0xd76](1461501637330902918203684832716283019655932542975,AND[0xd60](1461501637330902918203684832716283019655932542975,AND[0xd4a](1461501637330902918203684832716283019655932542975,DIV[0xd34](SLOAD[0xd2d](3),1))))
0xd7e  MSTORE: mem[32] = 1
0xdb1  MSTORE: mem[MLOAD[0xdad](64)] = CALLDATALOAD[0x2a0](4)
0x2bb  MSTORE: mem[MLOAD[0x2b3](64)] = 0
0xe7b  MSTORE: mem[0] = AND[0xe79](1461501637330902918203684832716283019655932542975,AND[0xe63](1461501637330902918203684832716283019655932542975,AND[0xe4d](1461501637330902918203684832716283019655932542975,DIV[0xe37](SLOAD[0xe30](3),1))))
0xe81  MSTORE: mem[32] = 1
0xeeb  MSTORE: mem[0] = AND[0xee9](1461501637330902918203684832716283019655932542975,AND[0xed3](1461501637330902918203684832716283019655932542975,AND[0xebd](1461501637330902918203684832716283019655932542975,DIV[0xea7](SLOAD[0xea0](3),1))))
0xef1  MSTORE: mem[32] = 1
0xf3f  MSTORE: mem[MLOAD[0xf3b](64)] = CALLDATALOAD[0x2e5](4)
0x300  MSTORE: mem[MLOAD[0x2f8](64)] = 0
0xf88  MSTORE: mem[0] = AND[0xf86](1461501637330902918203684832716283019655932542975,AND[0xf70](1461501637330902918203684832716283019655932542975,CALLER[0xf5a]()))
0xf8e  MSTORE: mem[32] = 2
0xfc5  MSTORE: mem[0] = AND[0xfc3](1461501637330902918203684832716283019655932542975,AND[0xfad](1461501637330902918203684832716283019655932542975,AND[0x340](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x32a](4))))
0xfcb  MSTORE: mem[32] = SHA3[0xf94](0,64)
0x1011 MSTORE: mem[0] = AND[0x100f](1461501637330902918203684832716283019655932542975,AND[0xff9](1461501637330902918203684832716283019655932542975,CALLER[0xfe3]()))
0x1017 MSTORE: mem[32] = 2
0x104e MSTORE: mem[0] = AND[0x104c](1461501637330902918203684832716283019655932542975,AND[0x1036](1461501637330902918203684832716283019655932542975,AND[0x340](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x32a](4))))
0x1054 MSTORE: mem[32] = SHA3[0x101d](0,64)
0x1179 MSTORE: mem[0] = AND[0x1177](1461501637330902918203684832716283019655932542975,AND[0x1161](1461501637330902918203684832716283019655932542975,CALLER[0x114b]()))
0x1179 MSTORE: mem[0] = AND[0x1177](1461501637330902918203684832716283019655932542975,AND[0x1161](1461501637330902918203684832716283019655932542975,CALLER[0x114b]()))
0x117f MSTORE: mem[32] = 2
0x117f MSTORE: mem[32] = 2
0x11b6 MSTORE: mem[0] = AND[0x11b4](1461501637330902918203684832716283019655932542975,AND[0x119e](1461501637330902918203684832716283019655932542975,AND[0x340](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x32a](4))))
0x11b6 MSTORE: mem[0] = AND[0x11b4](1461501637330902918203684832716283019655932542975,AND[0x119e](1461501637330902918203684832716283019655932542975,AND[0x340](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x32a](4))))
0x11bc MSTORE: mem[32] = SHA3[0x1185](0,64)
0x11bc MSTORE: mem[32] = SHA3[0x1185](0,64)
0x11ca MSTORE: mem[MLOAD[0x11c6](64)] = SLOAD[0x11c3](SHA3[0x11c2](0,64))
0x11ca MSTORE: mem[MLOAD[0x11c6](64)] = SLOAD[0x11c3](SHA3[0x11c2](0,64))
0x365  MSTORE: mem[MLOAD[0x35d](64)] = 1
0x10a9 MSTORE: mem[0] = AND[0x10a7](1461501637330902918203684832716283019655932542975,AND[0x1091](1461501637330902918203684832716283019655932542975,CALLER[0x107b]()))
0x10af MSTORE: mem[32] = 2
0x10e6 MSTORE: mem[0] = AND[0x10e4](1461501637330902918203684832716283019655932542975,AND[0x10ce](1461501637330902918203684832716283019655932542975,AND[0x340](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x32a](4))))
0x10ec MSTORE: mem[32] = SHA3[0x10b5](0,64)
0x1218 MSTORE: mem[0] = AND[0x1216](1461501637330902918203684832716283019655932542975,AND[0x1200](1461501637330902918203684832716283019655932542975,AND[0x3a5](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x38f](4))))
0x121e MSTORE: mem[32] = 1
0x3bc  MSTORE: mem[MLOAD[0x3b8](64)] = SLOAD[0x1225](SHA3[0x1224](0,64))
0x413  MSTORE: mem[MLOAD[0x3e3](64)] = AND[0x411](1461501637330902918203684832716283019655932542975,AND[0x3fb](1461501637330902918203684832716283019655932542975,AND[0x124f](1461501637330902918203684832716283019655932542975,DIV[0x1239](SLOAD[0x1232](3),1))))
0x127d MSTORE: mem[64] = ADD[0x127a](MLOAD[0x1277](64),ADD[0x1274](32,MUL[0x1271](DIV[0x1270](ADD[0x126b](31,DIV[0x1267](AND[0x1263](SUB[0x1262](MUL[0x1261](256,ISZERO[0x125d](AND[0x125c](1,SLOAD[0x1256](5)))),1),SLOAD[0x1256](5)),2)),32),32)))
0x1284 MSTORE: mem[MLOAD[0x1277](64)] = DIV[0x1267](AND[0x1263](SUB[0x1262](MUL[0x1261](256,ISZERO[0x125d](AND[0x125c](1,SLOAD[0x1256](5)))),1),SLOAD[0x1256](5)),2)
0x12b3 MSTORE: mem[ADD[0x1287](32,MLOAD[0x1277](64))] = MUL[0x12b1](DIV[0x12b0](SLOAD[0x12af](5),256),256)
0x444  MSTORE: mem[MLOAD[0x43a](64)] = SUB[0x442](ADD[0x43f](32,MLOAD[0x43a](64)),MLOAD[0x43a](64))
0x44a  MSTORE: mem[ADD[0x43f](32,MLOAD[0x43a](64))] = MLOAD[0x448](MLOAD[0x1277](64))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),0)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),0)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),0)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32)))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),32)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),32)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),32)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32)))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),ADD[0x470](#=0x470,32))] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),ADD[0x470](#=0x470,32))] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),ADD[0x470](#=0x470,32))] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32)))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),0)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),0)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),0)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32)))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),32)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),32)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),32)] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32)))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),ADD[0x470](#=0x470,32))] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),ADD[0x470](#=0x470,32))] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32))
0x46c  MSTORE: mem[ADD[0x46b](ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64))),ADD[0x470](#=0x470,32))] = MLOAD[0x468](ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32)))
0x12c4 MSTORE: mem[0] = 5
0x12cf MSTORE: mem[ADD[0x1287](32,MLOAD[0x1277](64))] = SLOAD[0x12cd](ADD[0x12d3](1,#=0x12d3))
0x12cf MSTORE: mem[ADD[0x1287](32,MLOAD[0x1277](64))] = SLOAD[0x12cd](ADD[0x12d3](1,SHA3[0x12c9](0,32)))
0x12cf MSTORE: mem[ADD[0x1287](32,MLOAD[0x1277](64))] = SLOAD[0x12cd](SHA3[0x12c9](0,32))
0x12cf MSTORE: mem[ADD[0x12d7](32,#=0x12d7)] = SLOAD[0x12cd](ADD[0x12d3](1,#=0x12d3))
0x12cf MSTORE: mem[ADD[0x12d7](32,#=0x12d7)] = SLOAD[0x12cd](ADD[0x12d3](1,SHA3[0x12c9](0,32)))
0x12cf MSTORE: mem[ADD[0x12d7](32,#=0x12d7)] = SLOAD[0x12cd](SHA3[0x12c9](0,32))
0x12cf MSTORE: mem[ADD[0x12d7](32,ADD[0x1287](32,MLOAD[0x1277](64)))] = SLOAD[0x12cd](ADD[0x12d3](1,#=0x12d3))
0x12cf MSTORE: mem[ADD[0x12d7](32,ADD[0x1287](32,MLOAD[0x1277](64)))] = SLOAD[0x12cd](ADD[0x12d3](1,SHA3[0x12c9](0,32)))
0x12cf MSTORE: mem[ADD[0x12d7](32,ADD[0x1287](32,MLOAD[0x1277](64)))] = SLOAD[0x12cd](SHA3[0x12c9](0,32))
0x49e  MSTORE: mem[SUB[0x48d](ADD[0x480](MLOAD[0x451](MLOAD[0x1277](64)),ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64)))),AND[0x484](31,MLOAD[0x451](MLOAD[0x1277](64))))] = AND[0x49c](NOT[0x49b](SUB[0x49a](EXP[0x499](256,SUB[0x495](32,AND[0x484](31,MLOAD[0x451](MLOAD[0x1277](64))))),1)),MLOAD[0x48f](SUB[0x48d](ADD[0x480](MLOAD[0x451](MLOAD[0x1277](64)),ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64)))),AND[0x484](31,MLOAD[0x451](MLOAD[0x1277](64))))))
0x186d MSTORE: mem[0] = AND[0x186b](1461501637330902918203684832716283019655932542975,AND[0x1855](1461501637330902918203684832716283019655932542975,CALLER[0x183f]()))
0x186d MSTORE: mem[0] = AND[0x186b](1461501637330902918203684832716283019655932542975,AND[0x1855](1461501637330902918203684832716283019655932542975,CALLER[0x183f]()))
0x1873 MSTORE: mem[32] = 1
0x1873 MSTORE: mem[32] = 1
0x18bf MSTORE: mem[0] = AND[0x18bd](1461501637330902918203684832716283019655932542975,AND[0x18a7](1461501637330902918203684832716283019655932542975,CALLER[0x1891]()))
0x18bf MSTORE: mem[0] = AND[0x18bd](1461501637330902918203684832716283019655932542975,AND[0x18a7](1461501637330902918203684832716283019655932542975,CALLER[0x1891]()))
0x18c5 MSTORE: mem[32] = 1
0x18c5 MSTORE: mem[32] = 1
0x190d MSTORE: mem[0] = AND[0x190b](1461501637330902918203684832716283019655932542975,AND[0x18f5](1461501637330902918203684832716283019655932542975,CALLER[0x18df]()))
0x190d MSTORE: mem[0] = AND[0x190b](1461501637330902918203684832716283019655932542975,AND[0x18f5](1461501637330902918203684832716283019655932542975,CALLER[0x18df]()))
0x1913 MSTORE: mem[32] = 1
0x1913 MSTORE: mem[32] = 1
0x1954 MSTORE: mem[0] = AND[0x1952](1461501637330902918203684832716283019655932542975,AND[0x193c](1461501637330902918203684832716283019655932542975,AND[0x4e3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x4cd](4))))
0x1954 MSTORE: mem[0] = AND[0x1952](1461501637330902918203684832716283019655932542975,AND[0x193c](1461501637330902918203684832716283019655932542975,AND[0x552](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x53c](36))))
0x1954 MSTORE: mem[0] = AND[0x1952](1461501637330902918203684832716283019655932542975,AND[0x193c](1461501637330902918203684832716283019655932542975,AND[0x4e3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x4cd](4))))
0x1954 MSTORE: mem[0] = AND[0x1952](1461501637330902918203684832716283019655932542975,AND[0x193c](1461501637330902918203684832716283019655932542975,AND[0x552](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x53c](36))))
0x195a MSTORE: mem[32] = 1
0x195a MSTORE: mem[32] = 1
0x19a2 MSTORE: mem[0] = AND[0x19a0](1461501637330902918203684832716283019655932542975,AND[0x198a](1461501637330902918203684832716283019655932542975,AND[0x552](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x53c](36))))
0x19a2 MSTORE: mem[0] = AND[0x19a0](1461501637330902918203684832716283019655932542975,AND[0x198a](1461501637330902918203684832716283019655932542975,AND[0x4e3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x4cd](4))))
0x19a2 MSTORE: mem[0] = AND[0x19a0](1461501637330902918203684832716283019655932542975,AND[0x198a](1461501637330902918203684832716283019655932542975,AND[0x552](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x53c](36))))
0x19a2 MSTORE: mem[0] = AND[0x19a0](1461501637330902918203684832716283019655932542975,AND[0x198a](1461501637330902918203684832716283019655932542975,AND[0x4e3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x4cd](4))))
0x19a8 MSTORE: mem[32] = 1
0x19a8 MSTORE: mem[32] = 1
0x1a09 MSTORE: mem[MLOAD[0x1a05](64)] = CALLDATALOAD[0x4ed](36)
0x1a09 MSTORE: mem[MLOAD[0x1a05](64)] = CALLDATALOAD[0x532](4)
0x508  MSTORE: mem[MLOAD[0x500](64)] = 1
0x581  MSTORE: mem[64] = ADD[0x57e](MLOAD[0x57b](64),ADD[0x578](32,MUL[0x575](DIV[0x574](ADD[0x56f](31,CALLDATALOAD[0x565](ADD[0x563](4,CALLDATALOAD[0x55c](68)))),32),32)))
0x589  MSTORE: mem[MLOAD[0x57b](64)] = CALLDATALOAD[0x565](ADD[0x563](4,CALLDATALOAD[0x55c](68)))
0x135e MSTORE: mem[MLOAD[0x135a](64)] = CALLDATALOAD[0x532](4)
0x136a MSTORE: mem[ADD[0x1361](32,MLOAD[0x135a](64))] = SUB[0x1368](ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64))),MLOAD[0x135a](64))
0x1370 MSTORE: mem[ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))] = MLOAD[0x136e](MLOAD[0x57b](64))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),0)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),0)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32)))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),0)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),ADD[0x1396](#=0x1396,32))] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),ADD[0x1396](#=0x1396,32))] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32)))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),ADD[0x1396](#=0x1396,32))] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),32)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),32)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32)))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),32)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),0)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),0)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32)))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),0)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),ADD[0x1396](#=0x1396,32))] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),ADD[0x1396](#=0x1396,32))] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32)))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),ADD[0x1396](#=0x1396,32))] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),32)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),32)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32)))
0x1392 MSTORE: mem[ADD[0x1391](ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64)))),32)] = MLOAD[0x138e](ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32))
0x13c4 MSTORE: mem[SUB[0x13b3](ADD[0x13a6](MLOAD[0x1377](MLOAD[0x57b](64)),ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64))))),AND[0x13aa](31,MLOAD[0x1377](MLOAD[0x57b](64))))] = AND[0x13c2](NOT[0x13c1](SUB[0x13c0](EXP[0x13bf](256,SUB[0x13bb](32,AND[0x13aa](31,MLOAD[0x1377](MLOAD[0x57b](64))))),1)),MLOAD[0x13b5](SUB[0x13b3](ADD[0x13a6](MLOAD[0x1377](MLOAD[0x57b](64)),ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64))))),AND[0x13aa](31,MLOAD[0x1377](MLOAD[0x57b](64))))))
0x5b3  MSTORE: mem[MLOAD[0x5ab](64)] = 1
0x1424 MSTORE: mem[0] = AND[0x1422](1461501637330902918203684832716283019655932542975,AND[0x140c](1461501637330902918203684832716283019655932542975,CALLER[0x13f6]()))
0x142a MSTORE: mem[32] = 2
0x1461 MSTORE: mem[0] = AND[0x145f](1461501637330902918203684832716283019655932542975,AND[0x1449](1461501637330902918203684832716283019655932542975,AND[0x5f3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x5dd](4))))
0x1467 MSTORE: mem[32] = SHA3[0x1430](0,64)
0x14af MSTORE: mem[0] = AND[0x14ad](1461501637330902918203684832716283019655932542975,AND[0x1497](1461501637330902918203684832716283019655932542975,CALLER[0x1481]()))
0x14b5 MSTORE: mem[32] = 2
0x14ec MSTORE: mem[0] = AND[0x14ea](1461501637330902918203684832716283019655932542975,AND[0x14d4](1461501637330902918203684832716283019655932542975,AND[0x5f3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x5dd](4))))
0x14f2 MSTORE: mem[32] = SHA3[0x14bb](0,64)
0x157e MSTORE: mem[0] = AND[0x157c](1461501637330902918203684832716283019655932542975,AND[0x1566](1461501637330902918203684832716283019655932542975,CALLER[0x1550]()))
0x1584 MSTORE: mem[32] = 2
0x15bb MSTORE: mem[0] = AND[0x15b9](1461501637330902918203684832716283019655932542975,AND[0x15a3](1461501637330902918203684832716283019655932542975,AND[0x5f3](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x5dd](4))))
0x15c1 MSTORE: mem[32] = SHA3[0x158a](0,64)
0x15cf MSTORE: mem[MLOAD[0x15cb](64)] = SLOAD[0x15c8](SHA3[0x15c7](0,64))
0x618  MSTORE: mem[MLOAD[0x610](64)] = 1
0x161c MSTORE: mem[0] = AND[0x161a](1461501637330902918203684832716283019655932542975,AND[0x1604](1461501637330902918203684832716283019655932542975,AND[0x658](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x642](4))))
0x1622 MSTORE: mem[32] = 2
0x1659 MSTORE: mem[0] = AND[0x1657](1461501637330902918203684832716283019655932542975,AND[0x1641](1461501637330902918203684832716283019655932542975,AND[0x678](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x662](36))))
0x165f MSTORE: mem[32] = SHA3[0x1628](0,64)
0x68f  MSTORE: mem[MLOAD[0x68b](64)] = SLOAD[0x1666](SHA3[0x1665](0,64))
0x4    MSTORE: mem[64] = 128
# MLOAD
0x706  MLOAD: mem[64]
0xf8   MLOAD: mem[64]
0x106  MLOAD: mem[MLOAD[0x706](64)]
0x10f  MLOAD: mem[MLOAD[0x706](64)]
0x126  MLOAD: mem[ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0)]
0x126  MLOAD: mem[ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32))]
0x126  MLOAD: mem[ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32)]
0x126  MLOAD: mem[ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),0)]
0x126  MLOAD: mem[ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),ADD[0x12e](#=0x12e,32))]
0x126  MLOAD: mem[ADD[0x125](ADD[0x113](32,MLOAD[0x706](64)),32)]
0x14d  MLOAD: mem[SUB[0x14b](ADD[0x13e](MLOAD[0x10f](MLOAD[0x706](64)),ADD[0x10b](32,ADD[0xfd](32,MLOAD[0xf8](64)))),AND[0x142](31,MLOAD[0x10f](MLOAD[0x706](64))))]
0x16a  MLOAD: mem[64]
0x16a  MLOAD: mem[64]
0x855  MLOAD: mem[64]
0x862  MLOAD: mem[64]
0x1be  MLOAD: mem[64]
0x1cf  MLOAD: mem[64]
0x1ed  MLOAD: mem[64]
0x1fa  MLOAD: mem[64]
0xc19  MLOAD: mem[64]
0xc26  MLOAD: mem[64]
0x26e  MLOAD: mem[64]
0x27f  MLOAD: mem[64]
0xdad  MLOAD: mem[64]
0xdba  MLOAD: mem[64]
0x2b3  MLOAD: mem[64]
0x2c4  MLOAD: mem[64]
0xf3b  MLOAD: mem[64]
0xf48  MLOAD: mem[64]
0x2f8  MLOAD: mem[64]
0x309  MLOAD: mem[64]
0x11c6 MLOAD: mem[64]
0x11c6 MLOAD: mem[64]
0x11d3 MLOAD: mem[64]
0x11d3 MLOAD: mem[64]
0x35d  MLOAD: mem[64]
0x36e  MLOAD: mem[64]
0x3b8  MLOAD: mem[64]
0x3c5  MLOAD: mem[64]
0x3e3  MLOAD: mem[64]
0x41c  MLOAD: mem[64]
0x1277 MLOAD: mem[64]
0x43a  MLOAD: mem[64]
0x448  MLOAD: mem[MLOAD[0x1277](64)]
0x451  MLOAD: mem[MLOAD[0x1277](64)]
0x468  MLOAD: mem[ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0)]
0x468  MLOAD: mem[ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32)]
0x468  MLOAD: mem[ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32))]
0x468  MLOAD: mem[ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),0)]
0x468  MLOAD: mem[ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),32)]
0x468  MLOAD: mem[ADD[0x467](ADD[0x455](32,MLOAD[0x1277](64)),ADD[0x470](#=0x470,32))]
0x48f  MLOAD: mem[SUB[0x48d](ADD[0x480](MLOAD[0x451](MLOAD[0x1277](64)),ADD[0x44d](32,ADD[0x43f](32,MLOAD[0x43a](64)))),AND[0x484](31,MLOAD[0x451](MLOAD[0x1277](64))))]
0x4ac  MLOAD: mem[64]
0x4ac  MLOAD: mem[64]
0x1a05 MLOAD: mem[64]
0x1a05 MLOAD: mem[64]
0x1a12 MLOAD: mem[64]
0x1a12 MLOAD: mem[64]
0x500  MLOAD: mem[64]
0x511  MLOAD: mem[64]
0x57b  MLOAD: mem[64]
0x135a MLOAD: mem[64]
0x136e MLOAD: mem[MLOAD[0x57b](64)]
0x1377 MLOAD: mem[MLOAD[0x57b](64)]
0x138e MLOAD: mem[ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0)]
0x138e MLOAD: mem[ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32))]
0x138e MLOAD: mem[ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32)]
0x138e MLOAD: mem[ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),0)]
0x138e MLOAD: mem[ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),ADD[0x1396](#=0x1396,32))]
0x138e MLOAD: mem[ADD[0x138d](ADD[0x137b](32,MLOAD[0x57b](64)),32)]
0x13b5 MLOAD: mem[SUB[0x13b3](ADD[0x13a6](MLOAD[0x1377](MLOAD[0x57b](64)),ADD[0x1373](32,ADD[0x1365](32,ADD[0x1361](32,MLOAD[0x135a](64))))),AND[0x13aa](31,MLOAD[0x1377](MLOAD[0x57b](64))))]
0x13d3 MLOAD: mem[64]
0x13d3 MLOAD: mem[64]
0x5ab  MLOAD: mem[64]
0x5bc  MLOAD: mem[64]
0x15cb MLOAD: mem[64]
0x15d8 MLOAD: mem[64]
0x610  MLOAD: mem[64]
0x621  MLOAD: mem[64]
0x68b  MLOAD: mem[64]
0x698  MLOAD: mem[64]
0x177a MLOAD: mem[64]
0x177d MLOAD: mem[64]
# SSTORE
0x801  SSTORE: sto[SHA3[0x7fe](0,64)] = CALLDATALOAD[0x1ab](36)
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0xa21  SSTORE: sto[SHA3[0xa1e](0,64)] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0xab6  SSTORE: sto[SHA3[0xab3](0,64)] = ADD[0x17e5](SLOAD[0xc9b](0),CALLDATALOAD[0x2a0](4))
0xab6  SSTORE: sto[SHA3[0xab3](0,64)] = ADD[0x17e5](SLOAD[0xd15](SHA3[0xd14](0,64)),CALLDATALOAD[0x2a0](4))
0xab6  SSTORE: sto[SHA3[0xab3](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x4ed](36))
0xab6  SSTORE: sto[SHA3[0xab3](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x532](4))
0xab6  SSTORE: sto[SHA3[0xab3](0,64)] = ADD[0x17e5](SLOAD[0xa66](SHA3[0xa65](0,64)),CALLDATALOAD[0x25b](68))
0xab6  SSTORE: sto[SHA3[0xab3](0,64)] = ADD[0x17e5](SLOAD[0x146e](SHA3[0x146d](0,64)),CALLDATALOAD[0x5fd](36))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0xbc5  SSTORE: sto[SHA3[0xbc2](0,64)] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0xcae  SSTORE: sto[0] = ADD[0x17e5](SLOAD[0xc9b](0),CALLDATALOAD[0x2a0](4))
0xcae  SSTORE: sto[0] = ADD[0x17e5](SLOAD[0xd15](SHA3[0xd14](0,64)),CALLDATALOAD[0x2a0](4))
0xcae  SSTORE: sto[0] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x4ed](36))
0xcae  SSTORE: sto[0] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x532](4))
0xcae  SSTORE: sto[0] = ADD[0x17e5](SLOAD[0xa66](SHA3[0xa65](0,64)),CALLDATALOAD[0x25b](68))
0xcae  SSTORE: sto[0] = ADD[0x17e5](SLOAD[0x146e](SHA3[0x146d](0,64)),CALLDATALOAD[0x5fd](36))
0xd87  SSTORE: sto[SHA3[0xd84](0,64)] = ADD[0x17e5](SLOAD[0xc9b](0),CALLDATALOAD[0x2a0](4))
0xd87  SSTORE: sto[SHA3[0xd84](0,64)] = ADD[0x17e5](SLOAD[0xd15](SHA3[0xd14](0,64)),CALLDATALOAD[0x2a0](4))
0xd87  SSTORE: sto[SHA3[0xd84](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x4ed](36))
0xd87  SSTORE: sto[SHA3[0xd84](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x532](4))
0xd87  SSTORE: sto[SHA3[0xd84](0,64)] = ADD[0x17e5](SLOAD[0xa66](SHA3[0xa65](0,64)),CALLDATALOAD[0x25b](68))
0xd87  SSTORE: sto[SHA3[0xd84](0,64)] = ADD[0x17e5](SLOAD[0x146e](SHA3[0x146d](0,64)),CALLDATALOAD[0x5fd](36))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0xefa  SSTORE: sto[SHA3[0xef7](0,64)] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0xf15  SSTORE: sto[0] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0x105d SSTORE: sto[SHA3[0x105a](0,64)] = 0
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0x10f5 SSTORE: sto[SHA3[0x10f2](0,64)] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x4ed](36))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xb38](SHA3[0xb37](0,64)),CALLDATALOAD[0x25b](68))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0x18cc](SHA3[0x18cb](0,64)),CALLDATALOAD[0x532](4))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xf02](0),CALLDATALOAD[0x2e5](4))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0x9d1](SHA3[0x9d0](0,64)),CALLDATALOAD[0x25b](68))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xe88](SHA3[0xe87](0,64)),CALLDATALOAD[0x2e5](4))
0x191c SSTORE: sto[SHA3[0x1919](0,64)] = SUB[0x17d7](SLOAD[0xfd2](SHA3[0xfd1](0,64)),CALLDATALOAD[0x34a](36))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0xc9b](0),CALLDATALOAD[0x2a0](4))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0xd15](SHA3[0xd14](0,64)),CALLDATALOAD[0x2a0](4))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x4ed](36))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x532](4))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0xa66](SHA3[0xa65](0,64)),CALLDATALOAD[0x25b](68))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0x146e](SHA3[0x146d](0,64)),CALLDATALOAD[0x5fd](36))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0xc9b](0),CALLDATALOAD[0x2a0](4))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0xd15](SHA3[0xd14](0,64)),CALLDATALOAD[0x2a0](4))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x4ed](36))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x532](4))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0xa66](SHA3[0xa65](0,64)),CALLDATALOAD[0x25b](68))
0x19b1 SSTORE: sto[SHA3[0x19ae](0,64)] = ADD[0x17e5](SLOAD[0x146e](SHA3[0x146d](0,64)),CALLDATALOAD[0x5fd](36))
0x14fb SSTORE: sto[SHA3[0x14f8](0,64)] = ADD[0x17e5](SLOAD[0xc9b](0),CALLDATALOAD[0x2a0](4))
0x14fb SSTORE: sto[SHA3[0x14f8](0,64)] = ADD[0x17e5](SLOAD[0xd15](SHA3[0xd14](0,64)),CALLDATALOAD[0x2a0](4))
0x14fb SSTORE: sto[SHA3[0x14f8](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x4ed](36))
0x14fb SSTORE: sto[SHA3[0x14f8](0,64)] = ADD[0x17e5](SLOAD[0x1961](SHA3[0x1960](0,64)),CALLDATALOAD[0x532](4))
0x14fb SSTORE: sto[SHA3[0x14f8](0,64)] = ADD[0x17e5](SLOAD[0xa66](SHA3[0xa65](0,64)),CALLDATALOAD[0x25b](68))
0x14fb SSTORE: sto[SHA3[0x14f8](0,64)] = ADD[0x17e5](SLOAD[0x146e](SHA3[0x146d](0,64)),CALLDATALOAD[0x5fd](36))
0x17c2 SSTORE: sto[3] = OR[0x17c0](MUL[0x17bf](AND[0x17be](1461501637330902918203684832716283019655932542975,AND[0x6cf](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x6b9](4))),1),AND[0x17a6](NOT[0x17a5](MUL[0x17a4](1461501637330902918203684832716283019655932542975,#=0x178b)),SLOAD[0x178d](3)))
# SLOAD
0x6e5  SLOAD: sto[4]
0x719  SLOAD: sto[4]
0x73e  SLOAD: sto[4]
0x75c  SLOAD: sto[SHA3[0x758](0,32)]
0x75c  SLOAD: sto[ADD[0x762](1,SHA3[0x758](0,32))]
0x75c  SLOAD: sto[ADD[0x762](1,#=0x762)]
0x874  SLOAD: sto[0]
0x8f4  SLOAD: sto[SHA3[0x8f3](0,64)]
0x97f  SLOAD: sto[SHA3[0x97e](0,64)]
0x9d1  SLOAD: sto[SHA3[0x9d0](0,64)]
0xa66  SLOAD: sto[SHA3[0xa65](0,64)]
0xb38  SLOAD: sto[SHA3[0xb37](0,64)]
0xc3e  SLOAD: sto[3]
0xc9b  SLOAD: sto[0]
0xcbd  SLOAD: sto[3]
0xd15  SLOAD: sto[SHA3[0xd14](0,64)]
0xd2d  SLOAD: sto[3]
0xdcc  SLOAD: sto[3]
0xe30  SLOAD: sto[3]
0xe88  SLOAD: sto[SHA3[0xe87](0,64)]
0xea0  SLOAD: sto[3]
0xf02  SLOAD: sto[0]
0xfd2  SLOAD: sto[SHA3[0xfd1](0,64)]
0x11c3 SLOAD: sto[SHA3[0x11c2](0,64)]
0x11c3 SLOAD: sto[SHA3[0x11c2](0,64)]
0x1225 SLOAD: sto[SHA3[0x1224](0,64)]
0x1232 SLOAD: sto[3]
0x1256 SLOAD: sto[5]
0x128a SLOAD: sto[5]
0x12af SLOAD: sto[5]
0x12cd SLOAD: sto[SHA3[0x12c9](0,32)]
0x12cd SLOAD: sto[ADD[0x12d3](1,#=0x12d3)]
0x12cd SLOAD: sto[ADD[0x12d3](1,SHA3[0x12c9](0,32))]
0x187a SLOAD: sto[SHA3[0x1879](0,64)]
0x187a SLOAD: sto[SHA3[0x1879](0,64)]
0x18cc SLOAD: sto[SHA3[0x18cb](0,64)]
0x18cc SLOAD: sto[SHA3[0x18cb](0,64)]
0x1961 SLOAD: sto[SHA3[0x1960](0,64)]
0x1961 SLOAD: sto[SHA3[0x1960](0,64)]
0x146e SLOAD: sto[SHA3[0x146d](0,64)]
0x15c8 SLOAD: sto[SHA3[0x15c7](0,64)]
0x1666 SLOAD: sto[SHA3[0x1665](0,64)]
0x1674 SLOAD: sto[3]
0x1723 SLOAD: sto[3]
0x178d SLOAD: sto[3]
export as Gym_Gym_dg.html
math/SafeMath.sol:SafeMath
# MSTORE
0x1b   MSTORE: mem[64] = 128
# MLOAD
# SSTORE
# SLOAD
export as math/SafeMath_SafeMath_dg.html
ownership/Ownable.sol:Ownable
# MSTORE
0x99   MSTORE: mem[MLOAD[0x69](64)] = AND[0x97](1461501637330902918203684832716283019655932542975,AND[0x81](1461501637330902918203684832716283019655932542975,AND[0x10d](1461501637330902918203684832716283019655932542975,DIV[0xf7](SLOAD[0xf0](0),1))))
0x4    MSTORE: mem[64] = 128
# MLOAD
0x69   MLOAD: mem[64]
0xa2   MLOAD: mem[64]
0x21a  MLOAD: mem[64]
0x21d  MLOAD: mem[64]
# SSTORE
0x261  SSTORE: sto[0] = OR[0x25f](MUL[0x25e](AND[0x25d](1461501637330902918203684832716283019655932542975,AND[0xd9](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0xc3](4))),1),AND[0x245](NOT[0x244](MUL[0x243](1461501637330902918203684832716283019655932542975,#=0x22a)),SLOAD[0x22c](0)))
# SLOAD
0xf0   SLOAD: sto[0]
0x115  SLOAD: sto[0]
0x1c3  SLOAD: sto[0]
0x22c  SLOAD: sto[0]
export as ownership/Ownable_Ownable_dg.html
token/BasicToken.sol:BasicToken
# MSTORE
0x78   MSTORE: mem[MLOAD[0x74](64)] = SLOAD[0x146](0)
0x17e  MSTORE: mem[0] = AND[0x17c](1461501637330902918203684832716283019655932542975,AND[0x166](1461501637330902918203684832716283019655932542975,AND[0xb8](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0xa2](4))))
0x184  MSTORE: mem[32] = 1
0xcf   MSTORE: mem[MLOAD[0xcb](64)] = SLOAD[0x18b](SHA3[0x18a](0,64))
0x202  MSTORE: mem[0] = AND[0x200](1461501637330902918203684832716283019655932542975,AND[0x1ea](1461501637330902918203684832716283019655932542975,CALLER[0x1d4]()))
0x208  MSTORE: mem[32] = 1
0x254  MSTORE: mem[0] = AND[0x252](1461501637330902918203684832716283019655932542975,AND[0x23c](1461501637330902918203684832716283019655932542975,CALLER[0x226]()))
0x25a  MSTORE: mem[32] = 1
0x2a2  MSTORE: mem[0] = AND[0x2a0](1461501637330902918203684832716283019655932542975,AND[0x28a](1461501637330902918203684832716283019655932542975,CALLER[0x274]()))
0x2a8  MSTORE: mem[32] = 1
0x2e9  MSTORE: mem[0] = AND[0x2e7](1461501637330902918203684832716283019655932542975,AND[0x2d1](1461501637330902918203684832716283019655932542975,AND[0x10f](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0xf9](4))))
0x2ef  MSTORE: mem[32] = 1
0x337  MSTORE: mem[0] = AND[0x335](1461501637330902918203684832716283019655932542975,AND[0x31f](1461501637330902918203684832716283019655932542975,AND[0x10f](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0xf9](4))))
0x33d  MSTORE: mem[32] = 1
0x39e  MSTORE: mem[MLOAD[0x39a](64)] = CALLDATALOAD[0x119](36)
0x134  MSTORE: mem[MLOAD[0x12c](64)] = 1
0x4    MSTORE: mem[64] = 128
# MLOAD
0x74   MLOAD: mem[64]
0x81   MLOAD: mem[64]
0xcb   MLOAD: mem[64]
0xd8   MLOAD: mem[64]
0x39a  MLOAD: mem[64]
0x3a7  MLOAD: mem[64]
0x12c  MLOAD: mem[64]
0x13d  MLOAD: mem[64]
# SSTORE
0x2b1  SSTORE: sto[SHA3[0x2ae](0,64)] = SUB[0x3c7](SLOAD[0x261](SHA3[0x260](0,64)),CALLDATALOAD[0x119](36))
0x346  SSTORE: sto[SHA3[0x343](0,64)] = ADD[0x3d5](SLOAD[0x2f6](SHA3[0x2f5](0,64)),CALLDATALOAD[0x119](36))
# SLOAD
0x146  SLOAD: sto[0]
0x18b  SLOAD: sto[SHA3[0x18a](0,64)]
0x20f  SLOAD: sto[SHA3[0x20e](0,64)]
0x261  SLOAD: sto[SHA3[0x260](0,64)]
0x2f6  SLOAD: sto[SHA3[0x2f5](0,64)]
export as token/BasicToken_BasicToken_dg.html
token/StandardToken.sol:StandardToken
# MSTORE
0x3db  MSTORE: mem[0] = AND[0x3d9](1461501637330902918203684832716283019655932542975,AND[0x3c3](1461501637330902918203684832716283019655932542975,CALLER[0x3ad]()))
0x3e1  MSTORE: mem[32] = 2
0x418  MSTORE: mem[0] = AND[0x416](1461501637330902918203684832716283019655932542975,AND[0x400](1461501637330902918203684832716283019655932542975,AND[0xc4](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0xae](4))))
0x41e  MSTORE: mem[32] = SHA3[0x3e7](0,64)
0x47f  MSTORE: mem[MLOAD[0x47b](64)] = CALLDATALOAD[0xce](36)
0xe9   MSTORE: mem[MLOAD[0xe1](64)] = 1
0x114  MSTORE: mem[MLOAD[0x110](64)] = SLOAD[0x49a](0)
0x50d  MSTORE: mem[0] = AND[0x50b](1461501637330902918203684832716283019655932542975,AND[0x4f5](1461501637330902918203684832716283019655932542975,AND[0x154](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x13e](4))))
0x513  MSTORE: mem[32] = 1
0x55b  MSTORE: mem[0] = AND[0x559](1461501637330902918203684832716283019655932542975,AND[0x543](1461501637330902918203684832716283019655932542975,AND[0x154](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x13e](4))))
0x561  MSTORE: mem[32] = 2
0x598  MSTORE: mem[0] = AND[0x596](1461501637330902918203684832716283019655932542975,AND[0x580](1461501637330902918203684832716283019655932542975,CALLER[0x56a]()))
0x59e  MSTORE: mem[32] = SHA3[0x567](0,64)
0x5ea  MSTORE: mem[0] = AND[0x5e8](1461501637330902918203684832716283019655932542975,AND[0x5d2](1461501637330902918203684832716283019655932542975,AND[0x154](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x13e](4))))
0x5f0  MSTORE: mem[32] = 1
0x638  MSTORE: mem[0] = AND[0x636](1461501637330902918203684832716283019655932542975,AND[0x620](1461501637330902918203684832716283019655932542975,AND[0x154](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x13e](4))))
0x63e  MSTORE: mem[32] = 1
0x67f  MSTORE: mem[0] = AND[0x67d](1461501637330902918203684832716283019655932542975,AND[0x667](1461501637330902918203684832716283019655932542975,AND[0x174](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x15e](36))))
0x685  MSTORE: mem[32] = 1
0x6cd  MSTORE: mem[0] = AND[0x6cb](1461501637330902918203684832716283019655932542975,AND[0x6b5](1461501637330902918203684832716283019655932542975,AND[0x174](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x15e](36))))
0x6d3  MSTORE: mem[32] = 1
0x714  MSTORE: mem[0] = AND[0x712](1461501637330902918203684832716283019655932542975,AND[0x6fc](1461501637330902918203684832716283019655932542975,AND[0x154](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x13e](4))))
0x71a  MSTORE: mem[32] = 2
0x751  MSTORE: mem[0] = AND[0x74f](1461501637330902918203684832716283019655932542975,AND[0x739](1461501637330902918203684832716283019655932542975,CALLER[0x723]()))
0x757  MSTORE: mem[32] = SHA3[0x720](0,64)
0x79f  MSTORE: mem[0] = AND[0x79d](1461501637330902918203684832716283019655932542975,AND[0x787](1461501637330902918203684832716283019655932542975,AND[0x154](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x13e](4))))
0x7a5  MSTORE: mem[32] = 2
0x7dc  MSTORE: mem[0] = AND[0x7da](1461501637330902918203684832716283019655932542975,AND[0x7c4](1461501637330902918203684832716283019655932542975,CALLER[0x7ae]()))
0x7e2  MSTORE: mem[32] = SHA3[0x7ab](0,64)
0x843  MSTORE: mem[MLOAD[0x83f](64)] = CALLDATALOAD[0x17e](68)
0x199  MSTORE: mem[MLOAD[0x191](64)] = 1
0x892  MSTORE: mem[0] = AND[0x890](1461501637330902918203684832716283019655932542975,AND[0x87a](1461501637330902918203684832716283019655932542975,CALLER[0x864]()))
0x898  MSTORE: mem[32] = 2
0x8cf  MSTORE: mem[0] = AND[0x8cd](1461501637330902918203684832716283019655932542975,AND[0x8b7](1461501637330902918203684832716283019655932542975,AND[0x1d9](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x1c3](4))))
0x8d5  MSTORE: mem[32] = SHA3[0x89e](0,64)
0x91b  MSTORE: mem[0] = AND[0x919](1461501637330902918203684832716283019655932542975,AND[0x903](1461501637330902918203684832716283019655932542975,CALLER[0x8ed]()))
0x921  MSTORE: mem[32] = 2
0x958  MSTORE: mem[0] = AND[0x956](1461501637330902918203684832716283019655932542975,AND[0x940](1461501637330902918203684832716283019655932542975,AND[0x1d9](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x1c3](4))))
0x95e  MSTORE: mem[32] = SHA3[0x927](0,64)
0xa83  MSTORE: mem[0] = AND[0xa81](1461501637330902918203684832716283019655932542975,AND[0xa6b](1461501637330902918203684832716283019655932542975,CALLER[0xa55]()))
0xa83  MSTORE: mem[0] = AND[0xa81](1461501637330902918203684832716283019655932542975,AND[0xa6b](1461501637330902918203684832716283019655932542975,CALLER[0xa55]()))
0xa89  MSTORE: mem[32] = 2
0xa89  MSTORE: mem[32] = 2
0xac0  MSTORE: mem[0] = AND[0xabe](1461501637330902918203684832716283019655932542975,AND[0xaa8](1461501637330902918203684832716283019655932542975,AND[0x1d9](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x1c3](4))))
0xac0  MSTORE: mem[0] = AND[0xabe](1461501637330902918203684832716283019655932542975,AND[0xaa8](1461501637330902918203684832716283019655932542975,AND[0x1d9](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x1c3](4))))
0xac6  MSTORE: mem[32] = SHA3[0xa8f](0,64)
0xac6  MSTORE: mem[32] = SHA3[0xa8f](0,64)
0xad4  MSTORE: mem[MLOAD[0xad0](64)] = SLOAD[0xacd](SHA3[0xacc](0,64))
0xad4  MSTORE: mem[MLOAD[0xad0](64)] = SLOAD[0xacd](SHA3[0xacc](0,64))
0x1fe  MSTORE: mem[MLOAD[0x1f6](64)] = 1
0x9b3  MSTORE: mem[0] = AND[0x9b1](1461501637330902918203684832716283019655932542975,AND[0x99b](1461501637330902918203684832716283019655932542975,CALLER[0x985]()))
0x9b9  MSTORE: mem[32] = 2
0x9f0  MSTORE: mem[0] = AND[0x9ee](1461501637330902918203684832716283019655932542975,AND[0x9d8](1461501637330902918203684832716283019655932542975,AND[0x1d9](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x1c3](4))))
0x9f6  MSTORE: mem[32] = SHA3[0x9bf](0,64)
0xb22  MSTORE: mem[0] = AND[0xb20](1461501637330902918203684832716283019655932542975,AND[0xb0a](1461501637330902918203684832716283019655932542975,AND[0x23e](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x228](4))))
0xb28  MSTORE: mem[32] = 1
0x255  MSTORE: mem[MLOAD[0x251](64)] = SLOAD[0xb2f](SHA3[0xb2e](0,64))
0xba6  MSTORE: mem[0] = AND[0xba4](1461501637330902918203684832716283019655932542975,AND[0xb8e](1461501637330902918203684832716283019655932542975,CALLER[0xb78]()))
0xbac  MSTORE: mem[32] = 1
0xbf8  MSTORE: mem[0] = AND[0xbf6](1461501637330902918203684832716283019655932542975,AND[0xbe0](1461501637330902918203684832716283019655932542975,CALLER[0xbca]()))
0xbfe  MSTORE: mem[32] = 1
0xc46  MSTORE: mem[0] = AND[0xc44](1461501637330902918203684832716283019655932542975,AND[0xc2e](1461501637330902918203684832716283019655932542975,CALLER[0xc18]()))
0xc4c  MSTORE: mem[32] = 1
0xc8d  MSTORE: mem[0] = AND[0xc8b](1461501637330902918203684832716283019655932542975,AND[0xc75](1461501637330902918203684832716283019655932542975,AND[0x295](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x27f](4))))
0xc93  MSTORE: mem[32] = 1
0xcdb  MSTORE: mem[0] = AND[0xcd9](1461501637330902918203684832716283019655932542975,AND[0xcc3](1461501637330902918203684832716283019655932542975,AND[0x295](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x27f](4))))
0xce1  MSTORE: mem[32] = 1
0xd42  MSTORE: mem[MLOAD[0xd3e](64)] = CALLDATALOAD[0x29f](36)
0x2ba  MSTORE: mem[MLOAD[0x2b2](64)] = 1
0xd93  MSTORE: mem[0] = AND[0xd91](1461501637330902918203684832716283019655932542975,AND[0xd7b](1461501637330902918203684832716283019655932542975,CALLER[0xd65]()))
0xd99  MSTORE: mem[32] = 2
0xdd0  MSTORE: mem[0] = AND[0xdce](1461501637330902918203684832716283019655932542975,AND[0xdb8](1461501637330902918203684832716283019655932542975,AND[0x2fa](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x2e4](4))))
0xdd6  MSTORE: mem[32] = SHA3[0xd9f](0,64)
0xe1e  MSTORE: mem[0] = AND[0xe1c](1461501637330902918203684832716283019655932542975,AND[0xe06](1461501637330902918203684832716283019655932542975,CALLER[0xdf0]()))
0xe24  MSTORE: mem[32] = 2
0xe5b  MSTORE: mem[0] = AND[0xe59](1461501637330902918203684832716283019655932542975,AND[0xe43](1461501637330902918203684832716283019655932542975,AND[0x2fa](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x2e4](4))))
0xe61  MSTORE: mem[32] = SHA3[0xe2a](0,64)
0xeed  MSTORE: mem[0] = AND[0xeeb](1461501637330902918203684832716283019655932542975,AND[0xed5](1461501637330902918203684832716283019655932542975,CALLER[0xebf]()))
0xef3  MSTORE: mem[32] = 2
0xf2a  MSTORE: mem[0] = AND[0xf28](1461501637330902918203684832716283019655932542975,AND[0xf12](1461501637330902918203684832716283019655932542975,AND[0x2fa](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x2e4](4))))
0xf30  MSTORE: mem[32] = SHA3[0xef9](0,64)
0xf3e  MSTORE: mem[MLOAD[0xf3a](64)] = SLOAD[0xf37](SHA3[0xf36](0,64))
0x31f  MSTORE: mem[MLOAD[0x317](64)] = 1
0xf8b  MSTORE: mem[0] = AND[0xf89](1461501637330902918203684832716283019655932542975,AND[0xf73](1461501637330902918203684832716283019655932542975,AND[0x35f](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x349](4))))
0xf91  MSTORE: mem[32] = 2
0xfc8  MSTORE: mem[0] = AND[0xfc6](1461501637330902918203684832716283019655932542975,AND[0xfb0](1461501637330902918203684832716283019655932542975,AND[0x37f](1461501637330902918203684832716283019655932542975,CALLDATALOAD[0x369](36))))
0xfce  MSTORE: mem[32] = SHA3[0xf97](0,64)
0x396  MSTORE: mem[MLOAD[0x392](64)] = SLOAD[0xfd5](SHA3[0xfd4](0,64))
0x4    MSTORE: mem[64] = 128
# MLOAD
0x47b  MLOAD: mem[64]
0x488  MLOAD: mem[64]
0xe1   MLOAD: mem[64]
0xf2   MLOAD: mem[64]
0x110  MLOAD: mem[64]
0x11d  MLOAD: mem[64]
0x83f  MLOAD: mem[64]
0x84c  MLOAD: mem[64]
0x191  MLOAD: mem[64]
0x1a2  MLOAD: mem[64]
0xad0  MLOAD: mem[64]
0xad0  MLOAD: mem[64]
0xadd  MLOAD: mem[64]
0xadd  MLOAD: mem[64]
0x1f6  MLOAD: mem[64]
0x207  MLOAD: mem[64]
0x251  MLOAD: mem[64]
0x25e  MLOAD: mem[64]
0xd3e  MLOAD: mem[64]
0xd4b  MLOAD: mem[64]
0x2b2  MLOAD: mem[64]
0x2c3  MLOAD: mem[64]
0xf3a  MLOAD: mem[64]
0xf47  MLOAD: mem[64]
0x317  MLOAD: mem[64]
0x328  MLOAD: mem[64]
0x392  MLOAD: mem[64]
0x39f  MLOAD: mem[64]
# SSTORE
0x427  SSTORE: sto[SHA3[0x424](0,64)] = CALLDATALOAD[0xce](36)
0x647  SSTORE: sto[SHA3[0x644](0,64)] = SUB[0xfee](SLOAD[0x5f7](SHA3[0x5f6](0,64)),CALLDATALOAD[0x17e](68))
0x647  SSTORE: sto[SHA3[0x644](0,64)] = SUB[0xfee](SLOAD[0xc05](SHA3[0xc04](0,64)),CALLDATALOAD[0x29f](36))
0x647  SSTORE: sto[SHA3[0x644](0,64)] = SUB[0xfee](SLOAD[0x8dc](SHA3[0x8db](0,64)),CALLDATALOAD[0x1e3](36))
0x647  SSTORE: sto[SHA3[0x644](0,64)] = SUB[0xfee](SLOAD[0x75e](SHA3[0x75d](0,64)),CALLDATALOAD[0x17e](68))
0x6dc  SSTORE: sto[SHA3[0x6d9](0,64)] = ADD[0xffc](SLOAD[0xc9a](SHA3[0xc99](0,64)),CALLDATALOAD[0x29f](36))
0x6dc  SSTORE: sto[SHA3[0x6d9](0,64)] = ADD[0xffc](SLOAD[0xddd](SHA3[0xddc](0,64)),CALLDATALOAD[0x304](36))
0x6dc  SSTORE: sto[SHA3[0x6d9](0,64)] = ADD[0xffc](SLOAD[0x68c](SHA3[0x68b](0,64)),CALLDATALOAD[0x17e](68))
0x7eb  SSTORE: sto[SHA3[0x7e8](0,64)] = SUB[0xfee](SLOAD[0x5f7](SHA3[0x5f6](0,64)),CALLDATALOAD[0x17e](68))
0x7eb  SSTORE: sto[SHA3[0x7e8](0,64)] = SUB[0xfee](SLOAD[0xc05](SHA3[0xc04](0,64)),CALLDATALOAD[0x29f](36))
0x7eb  SSTORE: sto[SHA3[0x7e8](0,64)] = SUB[0xfee](SLOAD[0x8dc](SHA3[0x8db](0,64)),CALLDATALOAD[0x1e3](36))
0x7eb  SSTORE: sto[SHA3[0x7e8](0,64)] = SUB[0xfee](SLOAD[0x75e](SHA3[0x75d](0,64)),CALLDATALOAD[0x17e](68))
0x967  SSTORE: sto[SHA3[0x964](0,64)] = 0
0x9ff  SSTORE: sto[SHA3[0x9fc](0,64)] = SUB[0xfee](SLOAD[0x5f7](SHA3[0x5f6](0,64)),CALLDATALOAD[0x17e](68))
0x9ff  SSTORE: sto[SHA3[0x9fc](0,64)] = SUB[0xfee](SLOAD[0xc05](SHA3[0xc04](0,64)),CALLDATALOAD[0x29f](36))
0x9ff  SSTORE: sto[SHA3[0x9fc](0,64)] = SUB[0xfee](SLOAD[0x8dc](SHA3[0x8db](0,64)),CALLDATALOAD[0x1e3](36))
0x9ff  SSTORE: sto[SHA3[0x9fc](0,64)] = SUB[0xfee](SLOAD[0x75e](SHA3[0x75d](0,64)),CALLDATALOAD[0x17e](68))
0xc55  SSTORE: sto[SHA3[0xc52](0,64)] = SUB[0xfee](SLOAD[0x5f7](SHA3[0x5f6](0,64)),CALLDATALOAD[0x17e](68))
0xc55  SSTORE: sto[SHA3[0xc52](0,64)] = SUB[0xfee](SLOAD[0xc05](SHA3[0xc04](0,64)),CALLDATALOAD[0x29f](36))
0xc55  SSTORE: sto[SHA3[0xc52](0,64)] = SUB[0xfee](SLOAD[0x8dc](SHA3[0x8db](0,64)),CALLDATALOAD[0x1e3](36))
0xc55  SSTORE: sto[SHA3[0xc52](0,64)] = SUB[0xfee](SLOAD[0x75e](SHA3[0x75d](0,64)),CALLDATALOAD[0x17e](68))
0xcea  SSTORE: sto[SHA3[0xce7](0,64)] = ADD[0xffc](SLOAD[0xc9a](SHA3[0xc99](0,64)),CALLDATALOAD[0x29f](36))
0xcea  SSTORE: sto[SHA3[0xce7](0,64)] = ADD[0xffc](SLOAD[0xddd](SHA3[0xddc](0,64)),CALLDATALOAD[0x304](36))
0xcea  SSTORE: sto[SHA3[0xce7](0,64)] = ADD[0xffc](SLOAD[0x68c](SHA3[0x68b](0,64)),CALLDATALOAD[0x17e](68))
0xe6a  SSTORE: sto[SHA3[0xe67](0,64)] = ADD[0xffc](SLOAD[0xc9a](SHA3[0xc99](0,64)),CALLDATALOAD[0x29f](36))
0xe6a  SSTORE: sto[SHA3[0xe67](0,64)] = ADD[0xffc](SLOAD[0xddd](SHA3[0xddc](0,64)),CALLDATALOAD[0x304](36))
0xe6a  SSTORE: sto[SHA3[0xe67](0,64)] = ADD[0xffc](SLOAD[0x68c](SHA3[0x68b](0,64)),CALLDATALOAD[0x17e](68))
# SLOAD
0x49a  SLOAD: sto[0]
0x51a  SLOAD: sto[SHA3[0x519](0,64)]
0x5a5  SLOAD: sto[SHA3[0x5a4](0,64)]
0x5f7  SLOAD: sto[SHA3[0x5f6](0,64)]
0x68c  SLOAD: sto[SHA3[0x68b](0,64)]
0x75e  SLOAD: sto[SHA3[0x75d](0,64)]
0x8dc  SLOAD: sto[SHA3[0x8db](0,64)]
0xacd  SLOAD: sto[SHA3[0xacc](0,64)]
0xacd  SLOAD: sto[SHA3[0xacc](0,64)]
0xb2f  SLOAD: sto[SHA3[0xb2e](0,64)]
0xbb3  SLOAD: sto[SHA3[0xbb2](0,64)]
0xc05  SLOAD: sto[SHA3[0xc04](0,64)]
0xc9a  SLOAD: sto[SHA3[0xc99](0,64)]
0xddd  SLOAD: sto[SHA3[0xddc](0,64)]
0xf37  SLOAD: sto[SHA3[0xf36](0,64)]
0xfd5  SLOAD: sto[SHA3[0xfd4](0,64)]
export as token/StandardToken_StandardToken_dg.html
